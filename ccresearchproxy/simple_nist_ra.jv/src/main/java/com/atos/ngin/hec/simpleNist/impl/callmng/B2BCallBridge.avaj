package com.atos.ngin.hec.simpleNist.impl.callmng;

import gov.nist.javax.sip.header.ContentType;

import java.text.ParseException;

import javax.sip.ClientTransaction;
import javax.sip.Dialog;
import javax.sip.InvalidArgumentException;
import javax.sip.ServerTransaction;
import javax.sip.SipException;
import javax.sip.SipProvider;
import javax.sip.header.ContentTypeHeader;
import javax.sip.message.MessageFactory;
import javax.sip.message.Request;
import javax.sip.message.Response;

import com.atos.ngin.hec.simpleNist.type.CallLeg;


public class B2BCallBridge implements CallManagerInterface
{
	private SipProvider provider;
	private MessageFactory messageFactory;
	
	public B2BCallBridge(SipProvider provider, MessageFactory  messageFactory)
	{
		this.provider = provider;
		this.messageFactory = messageFactory;
	}
	
	public void bridgeRequest(CallLeg incomingCL, CallLeg outgoingCL,
			Request incomingRequest)
	{
		String method = incomingRequest.getMethod();
		try
		{
			//watch this: these objects will change along the call
			Dialog outgoingDialog = outgoingCL.getCurrentServerTransaction().getDialog();
			outgoingDialog.isServer();
			
			Request outgoingRequest = outgoingDialog.createRequest(method);
			//TODO copy headers
			Object content = incomingRequest.getContent();
			ContentTypeHeader contentTypeHeader = (ContentTypeHeader)incomingRequest.getHeader(ContentType.NAME);
			if (content != null && contentTypeHeader != null)
			{
				outgoingRequest.setContent(content, contentTypeHeader);
			}
			else
			{
				//What happened?
			}

			ClientTransaction ct = provider.getNewClientTransaction(outgoingRequest);
			outgoingDialog.sendRequest(ct);
		} 
		catch (SipException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		catch (ParseException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void bridgeResponse(Dialog incomingDialog, Dialog outgoingDialog,
			Response incomingResponse)
	{}
	public void bridgeResponse(CallLeg incomingCL, CallLeg outgoingCL, //ServerTransaction st, Request request,
			Response incomingResponse)
	{
		int statusCode = incomingResponse.getStatusCode();		
		Response outgoingResponse;
		try
		{
			//watch this: these objects will change along the call			
			ServerTransaction st = outgoingCL.getCurrentServerTransaction();
			Request request = st.getRequest();
			
			outgoingResponse = messageFactory.createResponse(
			        statusCode, request);
			//TODO copy headers
			Object content = incomingResponse.getContent();
			ContentTypeHeader contentTypeHeader = (ContentTypeHeader)incomingResponse.getHeader(ContentType.NAME);
			if (content != null && contentTypeHeader != null)
			{
				outgoingResponse.setContent(content, contentTypeHeader);
			}
			else
			{
				//What happened?
			}			
			
			st.sendResponse(outgoingResponse);
		} 
		catch (ParseException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (SipException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		catch (InvalidArgumentException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}

}
