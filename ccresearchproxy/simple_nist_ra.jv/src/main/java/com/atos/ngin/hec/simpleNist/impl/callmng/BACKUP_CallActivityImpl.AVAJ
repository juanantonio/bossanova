/*
com.atos.ngin.hec.simpleNist.impl.CallActivityImpl.java

Copyright (c) 2009 AtosOrigin
Albarracin 25, 28037 Madrid
All Rights Reserved.

This software is confidential and proprietary information of AtosOrigin. 
You shall not disclose such confidential information and shall use it only 
in accordance with the terms of the license agreement established with 
AtosOrigin.
*/
package com.atos.ngin.hec.simpleNist.impl.callmng;



import gov.nist.javax.sip.Utils;
import gov.nist.javax.sip.header.Via;
import gov.nist.javax.sip.message.SIPRequest;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.atomic.AtomicLong;

import javax.sip.ClientTransaction;
import javax.sip.Dialog;
import javax.sip.InvalidArgumentException;
import javax.sip.SipException;
import javax.sip.TransactionUnavailableException;
import javax.sip.address.AddressFactory;
import javax.sip.address.SipURI;
import javax.sip.header.CSeqHeader;
import javax.sip.header.CallIdHeader;
import javax.sip.header.ContentTypeHeader;
import javax.sip.header.FromHeader;
import javax.sip.header.HeaderFactory;
import javax.sip.header.MaxForwardsHeader;
import javax.sip.header.RouteHeader;
import javax.sip.header.ToHeader;
import javax.sip.message.MessageFactory;
import javax.sip.message.Request;
import javax.slee.facilities.Tracer;
import javax.slee.resource.ResourceAdaptorContext;

import org.apache.log4j.Logger;

import com.atos.ngin.hec.simpleNist.impl.SimpleNISTResourceAdaptor;
import com.atos.ngin.hec.simpleNist.impl.SimpleNistProcessor;
import com.atos.ngin.hec.simpleNist.impl.callmng.CallProcessorStats.MessageStats.MessageCounter;
import com.atos.ngin.hec.simpleNist.type.CallActivity;
import com.atos.ngin.hec.simpleNist.type.CallLeg;
import com.atos.ngin.hec.simpleNist.type.CallLeg.CallLegState;
import com.atos.ngin.hec.simpleNist.type.CallLeg.CallLegType;
import com.atos.ngin.hec.simpleNist.type.GenericCDR;

/**
* Client activity implementation.
* 
* @author JACAR
* @since  3/May/2012
*/ 
public class CallActivityImpl implements CallActivity
{
	//ATTRIBUTES ---------------------------------------------------------------
	protected CallActivityHandle  handle;
	private SimpleNISTResourceAdaptor   ra;
	private SimpleNistProcessor   callProcessor;
	private CallLegImpl incomingCallLeg;
	private CallLegImpl outgoingCallLeg;
	private CallManagerInterface callManager;
	
	private CallHistoric historic;
	private GenericCDR cdrData;
	private CallLegType cdrCallLegType;

	private long initTime = 0;
	
	private CallState state = CallState.IDLE;
	
	
	private static Logger logger = Logger.getLogger("simpleNIST.CallActivityImpl");
	//METHODS ------------------------------------------------------------------
	
	/**
	 * ClientActivityImpl constructor. Activity identifier is specified
	 * as parameter
	 * 
	 * @param ar_id Activity identifier as an integer
	 */
	public CallActivityImpl(String callId, CallLegImpl incomingCallLeg, SimpleNISTResourceAdaptor ar_ra, SimpleNistProcessor callProcessor)
	{	
	  ResourceAdaptorContext context = ar_ra.getRaContext();
	  
	  this.ra = ar_ra;
	  this.callProcessor = callProcessor;
	  this.incomingCallLeg = incomingCallLeg;
	  this.handle = new CallActivityHandle(callId, ra.getRaContext().getEntityName());
	  this.callManager = new B2BCallBridge(callProcessor.getIngressSipProvider(), callProcessor.getMessageFactory());
	  
	  historic = new CallHistoric();
	  initTime = System.currentTimeMillis();
	}	
	
	/**
	 * Method to retrieve the connectionId member value
	 * 
	 * @return ConnectionId {@link ClientConnectionID}
	 */
	public CallActivityHandle getCallActivityHandle() 
	{
	  return handle;
	}  

	/**
	 * Method to release the activity (this method is unused).
	 */
	protected void release() 
	{
	  ra.activityEnded( ra.getActivityHandle(this) );
	}
	
	/**
	 * Gets the transaction identifier
	 */
	public String getTransactionId()
	{
	  return this.handle.getCallId();
	}

	public CallActivityHandle getActivityHandle()
	{
		return handle;
	}

	
	public boolean sendCDREvent (CallLeg callLeg, GenericCDR cdr)
	{
		if(cdr!=null)cdr.serialNumber=callProcessor.incrementAndGetSerialNumber();
		this.cdrData = cdr;
		this.cdrCallLegType = callLeg.getType();
		return true;
	}
	public void dispatchCDR()
	{
		long endTime = System.currentTimeMillis();
		cdrData.callDuration = Long.toString(endTime - initTime);
		cdrData.startDate = Long.toString(initTime);
		cdrData.endDate = Long.toString(endTime);
		ra.writeCDR(cdrData);
	}
	public boolean dispatchOutgoingCallLeg()
	{
		// TODO Auto-generated method stub
		return callProcessor.dispatchEgressCallLeg(incomingCallLeg, outgoingCallLeg);

	}	

	public CallLeg createOutgoingCallLeg()
	{
		// TODO Auto-generated method stub
		try
		{
			SIPRequest initialRequest = (SIPRequest)incomingCallLeg.getCurrentRequest();
//			SipURI uri = (SipURI)initialRequest.getRequestURI();
//			String method = "INVITE";
//			CallIdHeader callidheader = ra.getStackListener().sipProvider.getNewCallId();
			CallIdHeader callidheader = callProcessor.getEgressSipProvider().getNewCallId();
			CSeqHeader cseqheader = callProcessor.getHeaderFactory().createCSeqHeader((long)1, Request.INVITE);
	
//			FromHeader fromheader = (FromHeader)initialRequest.getHeader(FromHeader.NAME);
//			ToHeader toheader = (ToHeader)initialRequest.getHeader(ToHeader.NAME);
			List<Via> viaList = new ArrayList<Via>(); 
			viaList.add((Via)callProcessor.getHeaderFactory().createViaHeader(		
					callProcessor.getStackAddress(),
					callProcessor.getStackPort(),
					callProcessor.getStackTransport(),
					Utils.getInstance().generateBranchId()));

			MaxForwardsHeader maxforwardsheader = callProcessor.getHeaderFactory().createMaxForwardsHeader(70);
//			ContentTypeHeader contenttypeheader = (ContentTypeHeader)initialRequest.getHeader(ContentTypeHeader.NAME);//ra.headerFactory.createContentTypeHeader(s, s1);
//			Object content = initialRequest.getContent();			

			//Request request = callProcessor.getMessageFactory().createRequest(uri, method, callidheader, cseqheader, fromheader, toheader, viaList, maxforwardsheader, contenttypeheader, content);
			SIPRequest request = (SIPRequest)initialRequest.clone();
			request.setVia(viaList);
			request.setMaxForwards(maxforwardsheader);
			request.setCallId(callidheader);
			request.setCSeq(cseqheader);
			request.removeFirst(RouteHeader.NAME);
			
			//CONTACT
			request.addHeader(callProcessor.getStackContactHeader());
			
//			//ROUTE
//			ListIterator<RouteHeader> l = initialRequest.getHeaders(RouteHeader.NAME);
//			RouteHeader route = null;
//			RouteHeader myRoute = null;
////			ArrayList<RouteHeader> alRoute = null;
//			if (l != null)
//			{
//				if (l.hasNext())
//				{
//					myRoute = (RouteHeader)l.next();
//				}
////				alRoute = new ArrayList<RouteHeader>();
//				while (l.hasNext())
//				{
//					route = l.next();
//					if (route != null)
//					{
//						request.addHeader(route);
////						alRoute.add(route);
//					}
//				}
//			}			
			if(logger.isDebugEnabled())logger.debug("Created outgoing request: "+request);
//			ClientTransaction clientTransaction = ra.getStackListener().sipProvider.getNewClientTransaction(request);			
			ClientTransaction clientTransaction = callProcessor.getEgressSipProvider().getNewClientTransaction(request);
			outgoingCallLeg = new CallLegImpl(this, callidheader.getCallId(), clientTransaction, ra);
			return outgoingCallLeg;
		} 
		catch (ParseException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		return null;
	}

	//This is only for an incoming CL ACK....
	public void bridgeACK (Request incomingACKRequest)
	{
		try
		{
//			SipURI uri = (SipURI)outgoingCallLeg.getRequest().getRequestURI();
//			String method = "ACK";
//			CallIdHeader callidheader = (CallIdHeader)outgoingCallLeg.getRequest().getHeader(CallIdHeader.NAME);
//			CSeqHeader cseqheader = ra.headerFactory.createCSeqHeader((long)1, Request.ACK);
//	
//			FromHeader fromheader = (FromHeader)outgoingCallLeg.getRequest().getHeader(FromHeader.NAME);
//			ToHeader toheader = (ToHeader)outgoingCallLeg.getRequest().getHeader(ToHeader.NAME);
//			//			List<Via> viaList = new ArrayList<Via>(); 
//			//			viaList.add((Via)ra.headerFactory.createViaHeader(		
//			//						ra.getStackListener().getStackAddress(),
//			//						ra.getStackListener().getStackPort(),
//			//						ra.getStackListener().getStackTransport(),
//			//						Utils.getInstance().generateBranchId()));
//	        ViaList viaList = new ViaList();
//	        Via via;
//	        for(ListIterator<Via> viaHeaderList = outgoingCallLeg.getRequest().getHeaders(Via.NAME); viaHeaderList.hasNext(); viaList.add(via))
//	        {
//	            via = (Via)viaHeaderList.next();
//	            if(logger.isDebugEnabled())logger.debug("Adding via hader: "+via); 
//	        }	
//			MaxForwardsHeader maxforwardsheader = ra.headerFactory.createMaxForwardsHeader(70);
//			ContentTypeHeader contenttypeheader = (ContentTypeHeader)incomingCallLeg.getRequest().getHeader(ContentTypeHeader.NAME);//ra.headerFactory.createContentTypeHeader(s, s1);
//			Object content = incomingCallLeg.getRequest().getContent();				
//			Request outgoingACKRequest = ra.messageFactory.createRequest(uri, method, callidheader, cseqheader, fromheader, toheader, viaList, maxforwardsheader, contenttypeheader, content);
//			
//			//CONTACT
//			outgoingACKRequest.addHeader(callManager.getStackContactHeader());		
			//ra.getStackListener().sipProvider.sendRequest(request);
			//ClientTransaction clientTransaction = ra.getStackListener().sipProvider.getNewClientTransaction(outgoingACKRequest);
			Dialog dialog = outgoingCallLeg.getInitialClientTransaction().getDialog();
			dialog.setApplicationData(outgoingCallLeg);
			// TODO: check this possibility:
			Request outgoingACKRequest = dialog.createAck(1);
			dialog.sendAck(outgoingACKRequest);
			
		}
//		catch (ParseException e)
//		{
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} 
		catch (InvalidArgumentException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SipException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	//This is only for an incoming CL ACK....
	public void bridgeBYE (Request incomingBYEequest)
	{
		try
		{
//			SipURI uri = (SipURI)outgoingCallLeg.getRequest().getRequestURI();
//			String method = "ACK";
//			CallIdHeader callidheader = (CallIdHeader)outgoingCallLeg.getRequest().getHeader(CallIdHeader.NAME);
//			CSeqHeader cseqheader = ra.headerFactory.createCSeqHeader((long)1, Request.BYE);
//	
//			FromHeader fromheader = (FromHeader)outgoingCallLeg.getRequest().getHeader(FromHeader.NAME);
//			ToHeader toheader = (ToHeader)outgoingCallLeg.getRequest().getHeader(ToHeader.NAME);
//			//			List<Via> viaList = new ArrayList<Via>(); 
//			//			viaList.add((Via)ra.headerFactory.createViaHeader(		
//			//						ra.getStackListener().getStackAddress(),
//			//						ra.getStackListener().getStackPort(),
//			//						ra.getStackListener().getStackTransport(),
//			//						Utils.getInstance().generateBranchId()));
//	        ViaList viaList = new ViaList();
//	        Via via;
//	        for(ListIterator<Via> viaHeaderList = outgoingCallLeg.getRequest().getHeaders(Via.NAME); viaHeaderList.hasNext(); viaList.add(via))
//	        {
//	            via = (Via)viaHeaderList.next();
//	            if(logger.isDebugEnabled())logger.debug("Adding via hader: "+via); 
//	        }	
//			MaxForwardsHeader maxforwardsheader = ra.headerFactory.createMaxForwardsHeader(70);
//			ContentTypeHeader contenttypeheader = (ContentTypeHeader)incomingCallLeg.getRequest().getHeader(ContentTypeHeader.NAME);//ra.headerFactory.createContentTypeHeader(s, s1);
//			Object content = incomingCallLeg.getRequest().getContent();				
//			Request outgoingBYERequest = ra.messageFactory.createRequest(uri, method, callidheader, cseqheader, fromheader, toheader, viaList, maxforwardsheader, contenttypeheader, content);
//			
//			//CONTACT
//			outgoingBYERequest.addHeader(callManager.getStackContactHeader());		
////			ra.getStackListener().sipProvider.sendRequest(request);		
//			//			Dialog dialog = outgoingCallLeg.getClientTransaction().getDialog();
//			ClientTransaction clientTransaction = ra.getStackListener().sipProvider.getNewClientTransaction(outgoingBYERequest);
//			clientTransaction.setApplicationData(outgoingCallLeg);
//			clientTransaction.sendRequest();			
			// TODO: check this possibility:
			if(outgoingCallLeg == null)
			{
				logger.error("Null outgoing call leg in call activity "+toString());
				return;
			}
			if(outgoingCallLeg.getInitialClientTransaction() == null)
			{
				logger.error("No initital client Tx in outgoing CL "+outgoingCallLeg);
				return;
			}			
			Dialog dialog = outgoingCallLeg.getInitialClientTransaction().getDialog();
			dialog.setApplicationData(outgoingCallLeg);
			// TODO: check this possibility:
			Request outgoingBYERequest = dialog.createRequest(Request.BYE);
//			ClientTransaction clientTransaction = ra.getStackListener().sipProvider.getNewClientTransaction(outgoingBYERequest);
			ClientTransaction clientTransaction = callProcessor.getEgressSipProvider().getNewClientTransaction(outgoingBYERequest);
			dialog.setApplicationData(outgoingCallLeg);
			clientTransaction.setApplicationData(outgoingCallLeg);
			outgoingCallLeg.setClientTransaction(clientTransaction);
			dialog.sendRequest(clientTransaction);
			

			
		}
//		catch (ParseException e)
//		{
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} 
//		catch (InvalidArgumentException e)
//		{
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		catch (SipException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}			
		
	public void releaseCall(String releaseCode)
	{
		// TODO Auto-generated method stub
		
	}

	public void setIncomingCallLeg(CallLeg incomingCallLeg)
	{
		// TODO Auto-generated method stub
		this.incomingCallLeg = this.incomingCallLeg;
	}

	public CallLeg getOutgoingCallLeg()
	{
		// TODO Auto-generated method stub
		return outgoingCallLeg;
	}

	public String getIncomingCallId()
	{
		// TODO Auto-generated method stub
		return handle.getCallId();
	}

	public CallLeg getIncomingCallLeg()
	{
		// TODO Auto-generated method stub
		return incomingCallLeg;
	}

	public AddressFactory getAddressFactory()
	{
		// TODO Auto-generated method stub
		return callProcessor.getAddressFactory();
	}

	public HeaderFactory getHeaderFactory()
	{
		// TODO Auto-generated method stub
		return callProcessor.getHeaderFactory();
	}
	public MessageFactory getMessageFactory()
	{
		// TODO Auto-generated method stub
		return callProcessor.getMessageFactory();
	}

	public void cleanUp()
	{
		if (incomingCallLeg != null) incomingCallLeg.cleanUp();
		if (outgoingCallLeg != null) outgoingCallLeg.cleanUp();
		incomingCallLeg=null;
		outgoingCallLeg=null;
		callProcessor=null;
		callManager=null;
		historic=null;
		handle=null;
		cdrData=null;
	}
	public String toString()
	{
		StringBuilder sb = new StringBuilder("CallActivity: ");
		sb.append(incomingCallLeg)
		.append("//")
		.append(outgoingCallLeg);
		return sb.toString();
	}

}
