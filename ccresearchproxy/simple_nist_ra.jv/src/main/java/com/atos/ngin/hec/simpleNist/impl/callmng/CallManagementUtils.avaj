package com.atos.ngin.hec.simpleNist.impl.callmng;

import gov.nist.javax.sip.Utils;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ListIterator;

import javax.sdp.SdpException;
import javax.sip.InvalidArgumentException;
import javax.sip.address.Address;
import javax.sip.address.SipURI;
import javax.sip.address.TelURL;
import javax.sip.address.URI;
import javax.sip.header.CSeqHeader;
import javax.sip.header.CallIdHeader;
import javax.sip.header.ContactHeader;
import javax.sip.header.ContentTypeHeader;
import javax.sip.header.FromHeader;
import javax.sip.header.Header;
import javax.sip.header.MaxForwardsHeader;
import javax.sip.header.RouteHeader;
import javax.sip.header.ToHeader;
import javax.sip.header.ViaHeader;
import javax.sip.message.Request;

import org.apache.log4j.Logger;

import com.atos.agent.sip.common.CommonConstants;
import com.atos.agent.sip.header.Diversion;
import com.atos.agent.sip.parser.MimeParserManager;
import com.atos.agent.sip.parser.SipMimessage;
import com.atos.agent.sip.stack.SIPMessageParser;
import com.atos.agent.sip.stack.SIPStack;
import com.atos.agent.sip.stack.gtd.GTDParser;
import com.atos.agent.sip.stack.sdp.MediaParser;
import com.atos.agent.sip.util.SIPConstants;

public class CallManagementUtils
{
	private static Logger logger = Logger.getLogger("simpleNIST.CallManagementUtils");
	
	/**
	 * Create Invite Request
	 * @param request Originating request
	 * @param toUser To User
	 * @param toSipAddress To Address
	 * @param toDisplayName To Display Name
	 * @return Request Invite request
	 * @throws ParseException
	 * @throws InvalidArgumentException
	 * @throws SdpException 
	 * @throws IllegalAccessException 
	 * @throws InstantiationException 
	 * @throws ClassNotFoundException 
	 */
	public static Request createInviteRequest(String trcId, Request request, String toUser, String toSipAddress, String toDisplayName, boolean isDirectAccessLeg, boolean isAnnouncement,
								String disableEarlyMediaAddress, boolean isRefCallIdHeaderToAdd, boolean isDisableEarlyMedia, boolean isDisableEarlyMediaForMrf, 
								ContentTypeHeader contentType, String body, Header []headers, String []headersToRemove, URI uri, boolean keepToHeader, boolean applyXO, 
								String origTriggerId, String termTriggerId, boolean isVirtual, boolean isUserPhone) throws ParseException, InvalidArgumentException, ClassNotFoundException, InstantiationException, IllegalAccessException, SdpException
	{
		Request req = (Request)request.clone();
		
		req = normalizeFromHeader(req);
		
		if (body != null)
		{
			if (contentType == null)
				req.setContent(body, (ContentTypeHeader)req.getHeader(ContentTypeHeader.NAME));
			else
				req.setContent(body, contentType);
		}
		
		if (headersToRemove != null)
		{
			for (int i=0; i<headersToRemove.length; i++)
			{
				if (validRemoveHeaders.contains(headersToRemove[i]))
				{
					req.removeHeader(headersToRemove[i]);
					logger.debug("Removing header=" + headersToRemove[i]);
				}
			}
		}else{
			logger.debug("No header to remove");
		}
		
		if (headers != null)
		{
			for (int i=0; i<headers.length; i++)
			{
				if (headers[i] != null)
					req.removeHeader(headers[i].getName());
			}
		
			for (int i=0; i<headers.length; i++)
			{
				if (headers[i] != null)
				{
					if ( headers[i].getName().startsWith(CommonConstants.CUSTOM_HEADER_PREFIX) 
							|| validHeaders.contains(headers[i].getName()))
					{
						if (headers[i] instanceof Diversion) 
						{
							Diversion d = (Diversion)headers[i];
							headers[i] = headerFactory.createHeader(d.getName(), d.encodeBody());
										
							String content="";
							try
							{
								content = new String(req.getRawContent());
							}
							catch(Exception ex){}
					
							//quit redirection information
							content = GTDParser.removeGTDParam(content, "RNI");
					
							req.setContent(content, (ContentTypeHeader)req.getHeader(ContentTypeHeader.NAME));
						}
					
//						req.setHeader((Header)headers[i].clone());
						req.addHeader((Header)headers[i].clone());
					
						if (logger.isDebugEnabled())
							logger.debug("Adding header=" + headers[i]);
					}
				}
			}
		}
		
		if ( isDisableEarlyMediaForMrf && (req.getHeader("X-EarlyMediaInhibition") == null) )
			req.addHeader(headerFactory.createHeader("X-EarlyMediaInhibition", "true"));
		
		if ( isRefCallIdHeaderToAdd && (req.getHeader(CommonConstants.SIP_REF_CALLID) == null) )
		{
//			req.addHeader(headerFactory.createHeader(CommonConstants.SIP_REF_CALLID, getCallId(req, null)));
			try
			{
				req.addHeader(SIPMessageParser.createXRefHeader(req));
			}
			catch (ParseException ex)
			{
				logger.error("Exception=" + ex, ex);
			}
		}
		
		return createInviteRequest(trcId, req, uri, toUser, toSipAddress, toDisplayName, isDirectAccessLeg, isAnnouncement,
				disableEarlyMediaAddress, isDisableEarlyMedia, keepToHeader, applyXO, origTriggerId, termTriggerId, isVirtual, isUserPhone);
	}	

	/**
	 * Create Invite Request
	 * @param request Originating request
	 * @param toUser To User
	 * @param toSipAddress To Address
	 * @param toDisplayName To Display Name
	 * @return Request Invite request
	 * @throws ParseException
	 * @throws InvalidArgumentException
	 * @throws IllegalAccessException 
	 * @throws InstantiationException 
	 * @throws ClassNotFoundException 
	 * @throws SdpException 
	 */
	private static Request createInviteRequest(String trcId, Request req, URI requestURI, String toUser, String toSipAddress, String toDisplayName, 
				boolean isDirectAccessLeg, boolean isAnnouncement, String disableEarlyMediaAddress, boolean isDisableEarlyMedia, boolean keepToHeader, 
				boolean applyXO, String origTriggerId, String termTriggerId, boolean isVirtual, boolean userPhone) 
		throws ParseException, InvalidArgumentException, ClassNotFoundException, InstantiationException, IllegalAccessException, SdpException
	{
		if (logger.isDebugEnabled())
			logger.debug("Begin");
		
		if (logger.isDebugEnabled())
			logger.debug("Invite Request1=" + req);
		
		if (req.getHeader(CommonConstants.SIP_TRC_ID_HEADER) == null)
			req.addHeader(headerFactory.createHeader(CommonConstants.SIP_TRC_ID_HEADER, trcId));
		
		//Probably CSCF Address
		String peerHostPort = toSipAddress;
		
		//radvision
//		Request req = (Request)request.clone();
		//SIPRequest req = (SIPRequest)request.clone();
				
		req.removeHeader("Record-Route");
				
		//Testing
		//RouteList l = req.getRouteHeaders();
		//l.remove(0);
		
		ArrayList alRoute = null;
		RouteHeader myRoute = null;
		if (isDirectAccessLeg)
			req.removeHeader("Route");
		else
		{
			ListIterator l = req.getHeaders(RouteHeader.NAME);
			RouteHeader route = null;
			if (l != null)
			{
				if (l.hasNext())
					myRoute = (RouteHeader)l.next();
				
				alRoute = new ArrayList();
				while (l.hasNext())
				{
					route = (RouteHeader)l.next();
					if (route != null)
						alRoute.add(route);
				}
			}
		
			if (!isVirtual) {
				req.removeHeader("Route");
	//			if ( (SIPStack.stackRoute != null) && !SIPStack.stackRoute.equals("")) 
	//				req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";lr"));
			
				if (route != null)
				{
					Iterator it = alRoute.iterator();
					while (it.hasNext())
					{
						route = (RouteHeader)it.next();
						req.addHeader(route);
					}
				}
				else if ( (myRoute != null) && (myRoute.getAddress() != null) &&
						(myRoute.getAddress().toString().indexOf(SIPStack.stackAddress) == -1) )
				{
					//En la segunda pata del 3PCC se copiaría el route de la primera con ;term
					if (myRoute.getAddress().toString().indexOf(";term") != -1)
					{
						if ( (SIPStack.stackRoute != null) && !SIPStack.stackRoute.equals(""))
						{
							if (!isAnnouncement)
								req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";orig;lr"));
							else
								req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";lr"));
						}
					}
					else
						req.addHeader(myRoute);
				}
				else if (req.getRequestURI().toString().indexOf(SIPStack.stackAddress) == -1)
				{
					boolean directMrfAccess = false;
					if (!directMrfAccess)
					{
						if ( (SIPStack.stackRoute != null) && !SIPStack.stackRoute.equals(""))
						{
							if (!isAnnouncement)
								req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";lr"));
							else
								req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";lr"));
						}
					}
				
				}
				else
				{
					logger.warn("Discarding message to avoid loop=" + req);
					return null;
				}
				
//				else //Esto es válido si el routing al MRF se hace siempre a través del serving.
//				{
//					if ( (SIPStack.stackRoute != null) && !SIPStack.stackRoute.equals(""))
//					{
//						if (!isAnnouncement)
//							req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";orig;lr"));
//						else
//							req.addHeader(headerFactory.createHeader("Route", "sip:" + SIPStack.stackRoute + ";lr"));
//					}
//				}
			}
		}
		
		FromHeader fromHeader = (FromHeader)req.getHeader(FromHeader.NAME);
		
		//TODO
		//Cisco has to solve this problem
		String f = fromHeader.getAddress().toString();
		if (f.indexOf("gw.pop1.demo.vodafone.es") != -1)
		{
			f = f.replaceFirst("gw.pop1.demo.vodafone.es", "demo.vodafone.es");
			fromHeader.setAddress(addressFactory.createAddress(f));
		}
		
//		Ericsson
		fromHeader.setTag(Utils.getInstance().generateTag());
		
		//create To Header
		ToHeader toHeader;
		if (keepToHeader)
		{
			toHeader = (ToHeader)req.getHeader(ToHeader.NAME);
			toHeader.removeParameter("tag");
		}
		else
		{
			SipURI toAddress = addressFactory.createSipURI(toUser, toSipAddress);
			Address toNameAddress = addressFactory.createAddress(toAddress);
			toNameAddress.setDisplayName(toDisplayName);
			toHeader = headerFactory.createToHeader(toNameAddress, null);
		}
		
//		Header pAsserted = null;
//		if (req.getHeader("P-Asserted-Identity") == null)
//			pAsserted = headerFactory.createHeader("P-Asserted-Identity", fromHeader.getAddress().toString());
		
		//Create the contact name address.
		SipURI contactURI = addressFactory.createSipURI("stack", SIPStack.stackAddress);
		contactURI.setPort(SIPStack.stackPort);
		
		Address contactAddress = addressFactory.createAddress(contactURI);

		// Add the contact address.
		contactAddress.setDisplayName("stack");

		ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress);
		
		//Si origen=destino se mantiene exactamente el mismo requestURI
		//create Request URI
		if (requestURI == null)
		{
			String user = "";
			String host = "";
			URI uri = req.getRequestURI();
			
			if (logger.isDebugEnabled())
				logger.debug("Original URI=" + uri + " - User=" + user + " - Address=" + toSipAddress);
			
			if (uri instanceof SipURI)
			{
				SipURI sipURI = (SipURI)uri;
				user = sipURI.getUser();
				host = sipURI.getHost();
			}
			else if (uri instanceof TelURL)
			{
				TelURL telURI = (TelURL)uri;
				user = telURI.getPhoneNumber();
			}

			if (toUser.equals(user) && toSipAddress.equals(host))
				requestURI = uri;
			else
			{
				requestURI = addressFactory.createSipURI(toUser, peerHostPort);
//				if (toUser.startsWith(CommonConstants.SPAIN_INTERNATIONAL_PREFIX) && (uri instanceof SipURI))
				//TODO Mirar porque se hace esta comprobacion
				if ( userPhone && (uri instanceof SipURI))
					((SipURI)requestURI).setParameter(CommonConstants.SIP_URI_USER_PARAMETER, CommonConstants.SIP_URI_USER_PHONE_VALUE);
			}
		}
		
		if (logger.isDebugEnabled())
		{
			logger.debug("ApplyXO=" + applyXO + " - termTriggerId=" + termTriggerId + " - Original URI=" + req.getRequestURI() + " - Terminated URI=" + requestURI);
			if (myRoute != null)
				logger.debug("MyRoute=" + myRoute.toString());
		}
		
		if (applyXO && (myRoute != null) && (myRoute.toString().indexOf(termTriggerId) != -1) )
		{
			if (!requestURI.toString().equals(req.getRequestURI().toString()))
				req.addHeader(headerFactory.createHeader("X-Service-Override", "service=continue"));
		}
		
		//Create Call Id header
		CallIdHeader callIdHeader = SIPStack.sipProvider.getNewCallId();
		
		//Via
//		ArrayList viaHeaders = new ArrayList();
		ViaHeader viaHeader =
			headerFactory.createViaHeader(
				SIPStack.stackAddress,
				SIPStack.stackPort,
				SIPStack.stackTransport,
				//null);
				Utils.getInstance().generateBranchId());
		
		//add via headers
//		viaHeaders.add(viaHeader);
		
		//Create a new MaxForwardsHeader
		MaxForwardsHeader maxForwards = headerFactory.createMaxForwardsHeader(70);
		
		//Create a new Cseq header
		CSeqHeader cSeqHeader =
			headerFactory.createCSeqHeader(1, Request.INVITE);
				
		//TODO
		//?? para qué era el expires??
//		ExpiresHeader expires = headerFactory.createExpiresHeader(1);
		
//		req.addHeader(expires);
		req.setHeader(viaHeader);
		req.setHeader(maxForwards);
		req.setHeader(cSeqHeader);
		req.setHeader(callIdHeader);
		req.setHeader(toHeader);
		req.setHeader(contactHeader);
		req.setRequestURI(requestURI);
//		if (pAsserted != null)
//			req.setHeader(pAsserted);
		
		//TODO
		//for testing
		String content="";
		try
		{
			//content = req.getMessageContent();
			content = new String(req.getRawContent());
			
			if (logger.isDebugEnabled())
				logger.debug("Invite Content1=" + content);
		}
		catch(Exception ex){}
		
		content = GTDParser.removeGTDParam(content, "CIC");
//		content = GTDParser.removeGTDParam(content, "GEA");
//		content = GTDParser.changeGTDParam(content, "CPC", "15");
		
		if (logger.isDebugEnabled())
			logger.debug("Invite Content2=" + content);
		
		if (isDisableEarlyMedia)
		{
			ContentTypeHeader h = headerFactory.createContentTypeHeader(SIPConstants.MULTIPART_CONTENT_TYPE, SIPConstants.MIXED_CONTENT_SUBTYPE);
			h.setParameter(SIPConstants.BOUNDARY_PARAMETER_NAME, SIPConstants.UNIQUE_BOUNDARY_PARAMETER);
			SipMimessage mime = MimeParserManager.getInstance().getParser(MimeParserManager.MIME_PARSER_STRING).parseMime(h.toString(), content, false);
			if ( (mime != null) && (mime.getSDPAttachment() != null))
			{
				String sdpString = mime.getSDPAttachment().getStringContent();
				String modifiedSdp = MediaParser.modifyConnectionAddress(sdpString, disableEarlyMediaAddress);
			
				mime.getSDPAttachment().setContent(modifiedSdp.toString());
			
				req.setContent(MimeParserManager.getInstance().getParser(MimeParserManager.MIME_PARSER_STRING).parseSipMessage(mime), h);
			}
			else
			{
				content = MediaParser.modifyConnectionAddress(content, disableEarlyMediaAddress);
				
				req.setContent(content, (ContentTypeHeader)req.getHeader(ContentTypeHeader.NAME));
			}
		}
		else
			req.setContent(content, (ContentTypeHeader)req.getHeader(ContentTypeHeader.NAME));
		
//		
//		if (content.indexOf("CIC") != -1)
//		{
//			String tmp = "";
//			String tmp2 = "";
//			//CIC,0000000003
//			tmp = content.substring(0, content.indexOf("CIC"));
//			tmp2 = content.substring(content.indexOf("CIC") + 16, content.length());
//			String tmp3 = tmp + tmp2;
//			
//			tmp = tmp3.substring(0, tmp3.indexOf("GEA"));
//			logger.debug("TMP=" + tmp);
//			tmp2 = tmp3.substring(tmp3.indexOf("GEA"), tmp3.length());
//			logger.debug("TMP2=" + tmp2);
//			String tmp4 = tmp2.substring(tmp2.indexOf("\r\n") + 2, tmp2.length());
//			logger.debug("TMP4=" + tmp4);
//			
//			tmp3 = tmp + tmp4;
//			logger.debug("TMP3=" + tmp3);
//					
//			tmp3 = tmp3.replaceFirst("CPC,09", "CPC,15");
//			//tmp3 = tmp3.substring(0, tmp3.length() - 2);
//			tmp3 = tmp3 + "\r\n";
//			req.setContent(tmp3, ((SIPRequest)req).getContentTypeHeader());
//		}
		
		if (req.getContentLength().getContentLength() == 0)
		{
			if (logger.isDebugEnabled())
				logger.debug("Invite Request2 without Content-Type=" + req);
			
			req.removeHeader(ContentTypeHeader.NAME);
		}
		else
		{
			if (logger.isDebugEnabled())
				logger.debug("Invite Request2=" + req);
		}
		
	    return req;
	}
}
